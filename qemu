sudo apt install qemu-user 

# run ARM binary 
qemu-arm -L /usr/arm-linux-gnueabihf/  main 

# In order to run ELF with couple of libraries: 
qemu-arm /usr/arm-linux-gnueabihf/lib/ld-linux-armhf.so.3 --library-path "/usr/arm-linux-gnueabihf/lib:../:../../../../openssl" ./sample 
Note that its better to use the ld-linux of the target program (if its from a firmware for example)

# debug with qemu 
port 12345: 
qemu-arm -g 12345 -L /usr/arm-linux-gnueabihf/  main 

and in another terminal:
> gdb-multiarch
set $ROOT=/usr/arm-linux-gnueabihf/ # its better to use the root of the filesystem, if its a firmware
set solib-absolute-prefix $ROOT
set sysroot $ROOT
set solib-search-path $ROOT
target remote 127.0.0.1:12345
#break on every library load until you get your binary loaded, otherwise you will gonna need to break on a specific symbol
#which is a problem if there are no symbols at all
set stop-on-solib-events 1
cont

If you attach the debugger and has no debugging symbols - you can use the command:
> add-symbol-file <filepath> -o OFFSET
Where the offset can be retrieved by printing the /proc/PID/maps (PID is the child process of qemu)
For example, if you see the following in the maps file:
4000d5f000-4000d76000 r-xp 00000000 08:10 162074                         /usr/aarch64-linux-gnu/lib/libpthread-2.27.so
4000d76000-4000d85000 ---p 00017000 08:10 162074                         /usr/aarch64-linux-gnu/lib/libpthread-2.27.so
4000d85000-4000d86000 r--p 00016000 08:10 162074                         /usr/aarch64-linux-gnu/lib/libpthread-2.27.so
4000d86000-4000d87000 rw-p 00017000 08:10 162074                         /usr/aarch64-linux-gnu/lib/libpthread-2.27.so
Then the offset of libpthread-2.27.so will be 0x4000d5f000.
